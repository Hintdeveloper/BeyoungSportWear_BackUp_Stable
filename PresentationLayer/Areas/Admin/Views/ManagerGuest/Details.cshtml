@model BusinessLogicLayer.Viewmodels.ApplicationUser.UserDataVM
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Details";
    Layout = "~/Areas/Admin/Views/Shared/_layoutAdmin.cshtml";
}

<style>
    .table-borderless th, .table-borderless td {
        padding: 0.25rem; /* Giảm khoảng cách giữa các ô */
        vertical-align: middle; /* Căn giữa theo chiều dọc */
    }

    th {
        font-weight: bold;
    }

    .table th {
        width: 30%; /* Điều chỉnh tỷ lệ cột cho nhãn */
    }

    /* Inline CSS for Switch */
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        /* Hide default HTML checkbox */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

        /* The slider before (circle) */
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            border-radius: 50%;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
        }

    /* When the checkbox is checked, move the slider (circle) to the right */
    input:checked + .slider {
        background-color: #007bff;
    }

        /* When the checkbox is checked, move the slider (circle) to the right */
        input:checked + .slider:before {
            transform: translateX(26px);
        }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }

</style>
<div class="container">
    <div class="row">
        <!-- Thông tin khách hàng -->
        <div class="col-md-6">
            <h1>Thông tin khách hàng</h1>
            <hr />
            <table class="table border-0" style="width:auto;">
                <tbody>
                    <tr>
                        <td style="font-weight: bold;">
                            @* @Html.DisplayNameFor(model => model.FirstAndLastName)*@
                            Họ và tên
                        </td>
                        <td>
                            @Html.DisplayFor(model => model.FirstAndLastName)
                        </td>
                    </tr>
                    <tr>
                        <td style="font-weight: bold;">
                            @*    @Html.DisplayNameFor(model => model.Gender) *@
                            Giới tính
                        </td>
                        @if (Model.Gender == 0)
                        {
                            <td>Nam</td>
                        }
                        else
                        {
                            <td>Nữ</td>
                        }
                    </tr>
                    <tr>
                        <td style="font-weight: bold;">
                            @*  @Html.DisplayNameFor(model => model.DateOfBirth.Date) *@
                            Ngày sinh
                        </td>
                        <td>
                            @Html.DisplayFor(model => model.DateOfBirth.Date)
                        </td>
                    </tr>
                    <tr>
                        <td style="font-weight: bold;">
                            @Html.DisplayNameFor(model => model.Email)
                        </td>
                        <td>
                            @Html.DisplayFor(model => model.Email)
                        </td>
                    </tr>
                    <tr>
                        <td style="font-weight: bold;">
                            @*  @Html.DisplayNameFor(model => model.PhoneNumber) *@
                            Số điện thoại
                        </td>
                        <td>
                            @Html.DisplayFor(model => model.PhoneNumber)
                        </td>
                    </tr>
                    <tr>
                        <td style="font-weight: bold;">
                            @*  @Html.DisplayNameFor(model => model.Status) *@
                            Trạng thái
                        </td>
                        @if (Model.Status == 1)
                        {
                            <td>Hoạt động</td>
                        }
                        else
                        {
                            <td>Không hoạt động</td>
                        }
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Địa chỉ người dùng -->
        <div class="col-md-6">
            <h2>Địa chỉ người dùng</h2>
            <button id="createAddressButton" class="btn btn-success" onclick="openCreateModal()">Thêm địa chỉ</button>
            <table class="table table-borderless">
                <thead>
                    <tr>
                        <th>Địa chỉ</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.AddressVMs != null && Model.AddressVMs.Any())
                    {
                        @foreach (var address in Model.AddressVMs)
                        {
                            <tr>
                                <td>
                                    @if (address.IsDefault)
                                    {
                                        <small style="color: red;">Mặc định</small>
                                    }
                                    <p>
                                        @address.SpecificAddress, @address.Commune, @address.DistrictCounty, @address.City
                                    </p>
                                </td>
                                <td>
                                    <button class="btn btn-warning" onclick="openEditModal('@address.ID')">Sửa</button>
                                    <button class="btn btn-danger" onclick="deleteAddress('@address.ID')">Xóa</button>
                                    <div class="container" style="display: flex; align-items: center;">
                                        <label class="switch" style="margin: 0;">
                                            <input type="checkbox" id="toggleSwitch-@address.ID" @(address.IsDefault ? "checked='checked'" : "") onclick="handleToggleChange('@address.ID')">
                                            <span class="slider round"></span>
                                        </label>
                                        <span id="status-@address.ID" style="margin-left: 5px;">@(address.IsDefault ? "Bật" : "Tắt")</span>
                                    </div>

                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="2">Chưa có địa chỉ.</td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
    <div>
        <a asp-action="Edit" asp-route-id="@Model.ID" class="btn btn-warning">Sửa</a> |
        <a asp-action="Index" class="btn btn-link">Trở về</a>
    </div>
</div>


<!-- Modal for editing address -->
<div class="modal fade" id="editAddressModal" tabindex="-1" role="dialog" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title" id="updateAddressModalLabel">Cập nhật địa chỉ</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body">
                <input type="hidden" id="userId" value="@Model.ID" />
                <!-- Thêm phần tử form -->
                <div class="row">
                    <div class="row">
                        <div class="col-md-4">
                            <label for="city">Thành phố:</label>
                            <select id="city" name="city" class="form-control"></select>
                        </div>
                        <div class="col-md-4">
                            <label for="district">Quận/Huyện:</label>
                            <select id="district" name="district" class="form-control"></select>
                        </div>
                        <div class="col-md-4">
                            <label for="ward">Phường/Xã:</label>
                            <select id="ward" name="ward" class="form-control"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="specificAddress">Địa chỉ cụ thể:</label>
                        <input type="text" class="form-control" id="specificAddress" name="specificAddress" required>
                    </div>
                    @*   <div class="form-group">
                    <label for="IsDefault">Chọn làm mặc định?</label>
                    <input type="checkbox" class="form-control" id="IsDefault" name="IsDefault">
                    </div> *@
                </div>
                <!-- Modal Footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" id="saveButton">Lưu</button>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- Thêm SweetAlert2 CDN -->
    <script>
        function getJwtFromCookie() {
            return getCookieValue('jwt');
        }
        function getCookieValue(cookieName) {
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                const [name, value] = cookie.split('=').map(c => c.trim());
                if (name === cookieName) {
                    return decodeURIComponent(value);
                }
            }
            return null;
        }
        function getUserIdFromJwt(jwt) {
            try {
                const tokenPayload = JSON.parse(atob(jwt.split('.')[1]));
                return tokenPayload['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier'];
            }
            catch (error) {
                console.error('Error parsing JWT:', error);
                return null;
            }
        }

        const jwt = getJwtFromCookie();
        const userId = getUserIdFromJwt(jwt);

        //pop up form địa chỉ
        function openEditModal(addressId) {

            console.log('Opening modal for addressId:', addressId); // Kiểm tra giá trị addressId
            $('#editAddressModal').modal('show');

            if (!addressId) {
                console.error('Invalid addressId:', addressId);
                Swal.fire(
                    'Lỗi!',
                    'Không có thông tin địa chỉ để chỉnh sửa.',
                    'error'
                );
                return;
            }
            var saveButton = document.getElementById('saveButton');
            saveButton.innerHTML = 'Cập nhật';
            saveButton.onclick = function () {
                Swal.fire({
                    title: 'Bạn có chắc chắn?',
                    text: "Thông tin của bạn sẽ được cập nhật.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Cập nhật',
                    cancelButtonText: 'Hủy'
                }).then((result) => {
                    if (result.isConfirmed) {
                        submitAddressForm(addressId); //Hàm cập nhật địa chỉ
                        $('#editAddressModal').modal('hide');
                    }
                });

            };
            var xhr = new XMLHttpRequest();
            xhr.open('GET', `https://localhost:7241/api/Address/GetByIDAsync/${addressId}`, true);
            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 300) {
                    var response = JSON.parse(xhr.responseText);
                    console.log('Address details:', response); // Kiểm tra dữ liệu trả về

                    document.getElementById('specificAddress').value = response.specificAddress;
                    document.getElementById('city').value = response.city;

                    // Kích hoạt sự kiện change để load quận huyện
                    var citySelect = document.getElementById('city');
                    var event = new Event('change');
                    citySelect.dispatchEvent(event);

                    // Sau khi quận huyện được load, gán giá trị và kích hoạt sự kiện change để load xã phường
                    setTimeout(function () {
                        document.getElementById('district').value = response.districtCounty;
                        var districtSelect = document.getElementById('district');
                        districtSelect.dispatchEvent(event);
                    }, 500); // Đảm bảo quận huyện đã load xong

                    // Cuối cùng gán giá trị xã phường
                    setTimeout(function () {
                        document.getElementById('ward').value = response.commune;
                    }, 1000); // Đảm bảo xã phường đã load xong

                } else {
                    Swal.fire(
                        'Lỗi!',
                        'Không thể tải thông tin địa chỉ.',
                        'error'
                    );
                }
            };
            xhr.send();

        }
        function openCreateModal() {
            // Reset các trường nhập liệu trong modal
            document.getElementById('specificAddress').value = '';
            document.getElementById('city').value = '';
            document.getElementById('district').value = '';
            document.getElementById('ward').value = '';
            // document.getElementById('IsDefault').checked = false;

            $('#editAddressModal').modal('show');

            var saveButton = document.getElementById('saveButton');
            saveButton.innerHTML = 'Thêm mới';
            saveButton.onclick = function (event) {
                Swal.fire({
                    title: 'Bạn có chắc chắn?',
                    text: "Thông tin địa chỉ mới sẽ được thêm.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Thêm',
                    cancelButtonText: 'Hủy'
                }).then((result) => {
                    if (result.isConfirmed) {
                        submitNewAddressForm(); // Hàm tạo địa chỉ mới
                        $('#editAddressModal').modal('hide');
                        location.reload(); // Refresh trang để hiển thị địa chỉ mới trong danh sách
                    }
                });
            };
        }
        function deleteAddress(addressId) {
            Swal.fire({
                title: 'Bạn có chắc chắn muốn xóa địa chỉ này?',
                text: "Hành động này không thể hoàn tác!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Có, xóa!',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    var xhr = new XMLHttpRequest();
                    xhr.open('DELETE', `https://localhost:7241/api/Address/DeleteAddress/${addressId}?IDUserDelete=${userId}`, true);
                    xhr.onload = function () {
                        if (xhr.status >= 200 && xhr.status < 300) {
                            Swal.fire({
                                title: 'Đã xóa!',
                                text: 'Địa chỉ đã được xóa thành công.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    location.reload(); // Chỉ reload lại trang khi người dùng nhấn OK
                                }
                            });
                        } else {
                            Swal.fire(
                                'Lỗi!',
                                'Có lỗi xảy ra khi xóa địa chỉ.',
                                'error'
                            );
                        }
                    };
                    xhr.onerror = function () {
                        Swal.fire(
                            'Lỗi!',
                            'Có lỗi xảy ra khi kết nối với máy chủ.',
                            'error'
                        );
                    };
                    xhr.send();
                }
            });
        }

        function handleToggleChange(selectedAddressId) {
            const allToggleSwitches = document.querySelectorAll('.switch input[type="checkbox"]');
            const allStatusSpans = document.querySelectorAll('.address-actions #status');

            const userID = '@Model.ID'

            allToggleSwitches.forEach(function (toggleSwitch) {
                if (toggleSwitch.id !== `toggleSwitch-${selectedAddressId}`) {
                    toggleSwitch.checked = false;
                }
            });

            allStatusSpans.forEach(function (statusSpan) {
                if (statusSpan.id !== `status-${selectedAddressId}`) {
                    statusSpan.textContent = 'Tắt';
                }
            });

            const selectedToggleSwitch = document.getElementById(`toggleSwitch-${selectedAddressId}`);
            const selectedStatusSpan = document.getElementById(`status-${selectedAddressId}`);

            if (selectedToggleSwitch.checked) {
                selectedStatusSpan.textContent = 'Bật';

                const apiUrl = `https://localhost:7241/api/Address/set-default/${selectedAddressId}?userId=${userID}`;
                console.log('Calling API:', apiUrl);

                var xhr = new XMLHttpRequest();
                xhr.open('PUT', apiUrl, true);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                            var response = JSON.parse(xhr.responseText);
                            Swal.fire({
                                title: 'Thành công!',
                                text: response.message,
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                location.reload(true);
                            });
                        } else {
                            console.error('Error updating default address:', xhr.responseText);
                            Swal.fire({
                                title: 'Lỗi!',
                                text: 'Không thể cập nhật địa chỉ mặc định',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    }
                };
                xhr.send();
            } else {
                selectedStatusSpan.textContent = 'Tắt';
            }
        }

        function submitAddressForm(addressId) {
            var iduser = document.getElementById('userId').value;

            var isChecked = document.getElementById(`toggleSwitch-${addressId}`).checked;

            if (isChecked) {
                console.log('Checkbox is checked');
            } else {
                console.log('Checkbox is not checked');
            }

            var updatedAddress = {
                firstAndLastName: '@Model.FirstAndLastName',
                phoneNumber: '@Model.PhoneNumber',
                gmail: '@Model.Email',
                city: document.getElementById('city').value,
                districtCounty: document.getElementById('district').value,
                commune: document.getElementById('ward').value,
                specificAddress: document.getElementById('specificAddress').value,
                isDefault: isChecked,
                IDUser: iduser,
                ModifiedBy: userId
            };
            var xhr = new XMLHttpRequest();
            xhr.open('PUT', `https://localhost:7241/api/Address/UpdateAddress/${addressId}`, true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 300) {
                    Swal.fire({
                        title: 'Đã cập nhật!',
                        text: 'Địa chỉ đã được cập nhật thành công.',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload(true); // Chỉ reload lại trang khi người dùng nhấn OK
                        }
                    });
                } else {
                    Swal.fire(
                        'Lỗi!',
                        'Có lỗi xảy ra khi cập nhật địa chỉ.',
                        'error'
                    );
                }
            };
            xhr.onerror = function () {
                Swal.fire(
                    'Lỗi!',
                    'Có lỗi xảy ra khi kết nối với máy chủ.',
                    'error'
                );
            };
            xhr.send(JSON.stringify(updatedAddress));
        }
        function submitNewAddressForm() {
            var iduser = document.getElementById('userId').value;
            var newAddress = {
                firstAndLastName: "@(Model.FirstAndLastName)",
                phoneNumber: "@(Model.PhoneNumber)",
                gmail: "@(Model.Email)",
                city: document.getElementById('city').value,
                districtCounty: document.getElementById('district').value,
                commune: document.getElementById('ward').value,
                specificAddress: document.getElementById('specificAddress').value,
                isDefault: false,
                IDUser: iduser,
                createBy: userId // userId được lấy từ JWT
            };

            var xhr = new XMLHttpRequest();
            xhr.open('POST', `https://localhost:7241/api/Address/create_address`, true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 300) {
                    Swal.fire({
                        title: 'Đã thêm!',
                        text: 'Địa chỉ mới đã được thêm thành công.',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload(true) // Reload trang để hiển thị địa chỉ mới trong danh sách
                        }
                    });
                } else {
                    console.error('Error:', xhr.status, xhr.statusText);
                    Swal.fire(
                        'Lỗi!',
                        'Có lỗi xảy ra khi thêm địa chỉ.',
                        'error'
                    );
                }
            };
            xhr.onerror = function () {
                Swal.fire(
                    'Lỗi!',
                    'Có lỗi xảy ra khi kết nối với máy chủ.',
                    'error'
                );
            };
            xhr.send(JSON.stringify(newAddress));
        }
        document.addEventListener("DOMContentLoaded", function () {
            var token = 'd01771f0-3f8b-11ef-8f55-4ee3d82283af';
            var Parameter = {
                url: "https://raw.githubusercontent.com/kenzouno1/DiaGioiHanhChinhVN/master/data.json",
                method: "GET",
                responseType: "json",
            };

            var xhr = new XMLHttpRequest();
            xhr.open('GET', Parameter.url, true);
            xhr.responseType = 'json';
            xhr.onload = function () {
                if (xhr.status === 200) {
                    renderCity(xhr.response);
                } else {
                    console.error('Error fetching data: ', xhr.statusText);
                }
            };
            xhr.onerror = function () {
                console.error('Request failed');
            };
            xhr.send();

            function renderCity(data) {
                var citiesSelect = document.getElementById("city");
                var districtsSelect = document.getElementById("district");
                var wardsSelect = document.getElementById("ward");

                citiesSelect.innerHTML = '<option value="" selected>Chọn tỉnh thành</option>';
                data.forEach(function (city) {
                    var option = document.createElement("option");
                    option.value = city.Name;
                    option.textContent = city.Name;
                    citiesSelect.appendChild(option);
                });

                citiesSelect.addEventListener('change', function () {
                    districtsSelect.innerHTML = '<option value="" selected>Chọn quận huyện</option>';
                    wardsSelect.innerHTML = '<option value="" selected>Chọn xã phường</option>';
                    districtsSelect.disabled = true;
                    wardsSelect.disabled = true;

                    var selectedCity = data.find(city => city.Name === this.value);
                    if (selectedCity) {
                        selectedCity.Districts.forEach(function (district) {
                            var option = document.createElement("option");
                            option.value = district.Name;
                            option.textContent = district.Name;
                            districtsSelect.appendChild(option);
                        });
                        districtsSelect.disabled = false;
                    }
                });

                districtsSelect.addEventListener('change', function () {
                    wardsSelect.innerHTML = '<option value="" selected>Chọn xã phường</option>';
                    wardsSelect.disabled = true;

                    var selectedCity = data.find(city => city.Name === document.getElementById('city').value);
                    if (selectedCity) {
                        var selectedDistrict = selectedCity.Districts.find(district => district.Name === this.value);
                        if (selectedDistrict) {
                            selectedDistrict.Wards.forEach(function (ward) {
                                var option = document.createElement("option");
                                option.value = ward.Name;
                                option.textContent = ward.Name;
                                wardsSelect.appendChild(option);
                            });
                            wardsSelect.disabled = false;
                        }
                    }
                });

                wardsSelect.addEventListener('change', function () {
                    // Bạn có thể thực hiện tính toán phí vận chuyển hoặc hành động khác ở đây
                });
            }
        });

    </script>
}
